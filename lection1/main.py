
# n = 'let\'go'
# m = 'go "master" go'
# print(n, m)
# print(type(n))
"""
комментарий 
нескольких 
строчек
"""
'''комментарий 
нескольких 
строчек'''

# комментарий
# нескольких
# строчек

# a = 5
# b = 5.89
# c = 'hello'
# print (a,' - ', b, ' - ', c)
# print(f'{a} - {b} - {c}')
# print("{} - {} - {}".format(a,b,c))

# print ('Введите первое число:') # при таков варианте перенос строки
# a = int(input())
# b = int(input('Введите число:')) # при таков варианте рядом
# print(a + b)

# c = 5.89
# print(c)
# print(type(c))
# c = str(c)
# print (c + ' теперь это строка')
# print(type(c))
# a = 5.89756
# b = 7.54236
# print (round(a*b,2))
# a = 1 > 4 and 5 > 2
# a = 3 > 1 < 5 < 7 < 10
# print(a)
# username = input("Введите свое имя: ")
# if username == "Филипп":
#     print ("Ура, это же Филипп!")
# elif username == "Марина":
#     print ("Я так ждал вас, Марина!")
# elif username == "Ильнар":
#     print ("Ильнар - топ")
# else:
#     print (f"Привет, {username}")
# n = 423
# sum = 0
# while n > 0:
#     x = n % 10
#     sum += x
#     n = n // 10
# print(sum)
# i = 0
# while i<5:
#     if i == 3:
#         break
#     i+=1
# else:
#     print("Хватит")
# print(i)
# n = int(input()) # программа определения минимального делителя
# flag = True
# i = 2
# while flag:
#     if n % i == 0:  # если остаток при делении n на i  равен 0
#         flag = False #Данный алгоритм будет работать до тех пор, пока не найдется минимальный делитель
# #введенного числа. Когда будет найден первый делитель цикл остановит свою работу, так как
# #условие, которое находится внутри станет ложным(False)
#         print(i)
#     elif i > n // 2:  # делить числа пока не может превышать ввыеденное число, деленное на 2
#         print(n)
#         flag = False
#     i += 1

# # Range выдает значения из диапазона с шагом 1.
# # ● Если указано только одно число — от 0 до заданного числа.
# # ● Если нужен другой шаг, третьим аргументов можно задать приращение.
# # последнее число в диапазоне не выводится
# r = range(5) # 0 1 2 3 4
# r = range(2, 5) # 2 3 4
# r = range(-5, 0) #-5 -4 -3 -2 -1
# r = range(1, 10, 2) # 1 3 5 7
# r = range(100, 0, -20) # 100 80 60 40 20
# for i in r:
#     print(i)
# for i in range(0, -5, -1):
#     print(i)
# a = 'qwerty'
# for i in a: # у сивлолов в строке нумерация как у массивов
#     print(i)
# print(a[1])
# line = ""
# for i in range(5):
#  line = ""
#  for j in range(5):
#     line += "*"
#  print(line)

# Возникают ситуации, когда в некоторых задачах необходимо поработать со строкой,
# которую ввел пользователь. Например: необходимо сделать все буквы маленькими, или
# поменять все буквы “ё” на “е”.
# text = 'СъЕШЬ ещё этих МяГкИх французских булок'
# print(len(text)) # 39
# print('ещё' in text) # True - проверяем есть ли эат строка в строке text
# print(text.lower()) # съешь ещё этих мягких французских булок - перевод всех букв в нижний регистр
# print(text.upper()) # СЪЕШЬ ЕЩЁ ЭТИХ МЯГКИХ ФРАНЦУЗСКИХ БУЛОК -  перевод всех букв в верхний регистр
# print(text.replace('ещё','ЕЩЁ')) # СъЕШЬ ЕЩЁ этих МяГкИх французских булок - замена одного на другое

# Мы представляем строку в виде массива символов. Значит мы можем обращаться к
# элементам по индексам.
# ● Отрицательное число в индексе — счёт с конца строки
text = 'съешь ещё этих мягких французских булок'
print(text[0]) # c
print(text[1]) # ъ
print(text[len(text)-1]) # к
print(text[-5]) # б
print(text[:]) # съешь ещё этих мягких французских булок - выводит всю строку
print(text[:2]) # съ - вывод элемента с нулевого по 2, т.е элемент 0 и 1
print(text[len(text)-2:]) # ок -  вывод элемента с нулевого длина - 2
print(text[2:9]) # ешь ещё - от 2го до 8го 
print(text[6:-18]) # ещё этих мягких  - можно использовать отрицательную индексацию
print(text[0:len(text):6]) # сеикакл - третий элемент - шаг, т.е от 0 до конца с шагом 6
print(text[::6]) # сеикакл - можно перед двоеточием ничего не писать, двоеточие - разделитель
text = text[2:9] + text[-5] + text[:2] # ...
print(text)